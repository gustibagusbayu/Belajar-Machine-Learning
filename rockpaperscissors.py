# -*- coding: utf-8 -*-
"""RockPapersCissors.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19-u9ree7KP1xWLHFEnOVMOjoM5unUl8W
"""

import tensorflow as tf
from tensorflow.keras.optimizers import RMSprop
from tensorflow.keras.preprocessing.image import ImageDataGenerator

!wget --no-check-certificate \
https://dicodingacademy.blob.core.windows.net/picodiploma/ml_pemula_academy/rockpaperscissors.zip \
-O /tmp/rockpaperscissors.zip

# ekstraksi data pada file zip
import zipfile,os
local_zip = '/tmp/rockpaperscissors.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/tmp')
zip_ref.close()

base_dir = '/tmp/rockpaperscissors'
train_dir = os.path.join(base_dir, 'rps-cv-images')

os.listdir('/tmp/rockpaperscissors/rps-cv-images')

# membuat direktori scissors pada direktori data training
train_scissors_dir = os.path.join(train_dir, 'scissors')

# membuat direktori rock pada direktori data training
train_rock_dir = os.path.join(train_dir, 'rock')

# membuat direktori paper pada direktori data training
train_paper_dir = os.path.join(train_dir, 'paper')

train_datagen = ImageDataGenerator(
                    rescale=1/255,
                    rotation_range=20,
                    horizontal_flip=True,
                    shear_range=0.2,
                    fill_mode = 'nearest',
                    validation_split=0.2) #untuk validation

train_generator = train_datagen.flow_from_directory(
        train_dir, #direktori data latih
        target_size = (150,150), #mengubah resolusi seluruh gambar menjadi 150 x 150 pixel
        batch_size = 4, 
        # karena menggunakan masalah klasifikasi lebih dari 2 jenis kelas maka menggunakan class_mode = 'categorical'
        class_mode='categorical',
        # subset untuk training
        subset='training')

validation_generator = train_datagen.flow_from_directory(
        train_dir, #direktori data validation
        target_size = (150,150), #mengubah resolusi seluruh gambar menjadi 150 x 150 pixel
        batch_size = 4, 
        # karena menggunakan masalah klasifikasi lebih dari 2 jenis kelas maka menggunakan class_mode = 'categorical'
        class_mode='categorical',
        # subset untuk validation
        subset='validation')

# membuat arsitektur CNN
model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape =(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax')
])

# compile model
logits = model.compile(loss='categorical_crossentropy',
              optimizer= tf.optimizers.Adam(),
              metrics=['accuracy'])


# melatih model
model.fit(
    train_generator,
    steps_per_epoch = 25, #berapa batch yang akan dieksekusi pada setiap epoch
    epochs = 45,
    validation_data = validation_generator, #menampilkan akurasi pengujian data validasi
    validation_steps = 15, #berapa batch yang akan dieksekusi pada setiap epoch
    verbose = 2)

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
from google.colab import files
from keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg

# %matplotlib inline

uploaded = files.upload()

# fungsi untuk konversi list ke string
def listToString(result):
  str_element = ""
  for element in classes:
    str_element += element

  return str_element



for fn in uploaded.keys():
  # prediksi gambar
  path = fn
  img = image.load_img(path, target_size=(150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)

  images = np.vstack([x])
  classes = str(model.predict(images, batch_size=15))

  print(classes)

  print(fn)

  result = listToString(classes)

  # print(type(result))

  if result =='[[0. 0. 1.]]':
    print('Scissors')
  elif result =='[[0. 1. 0.]]':
    print('Rock')
  elif result =='[[1. 0. 0.]]': 
    print('Paper')